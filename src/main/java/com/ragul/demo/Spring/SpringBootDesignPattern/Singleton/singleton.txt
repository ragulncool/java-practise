The Singleton Pattern ensures that a class has only one instance and provides a global point of access to that instance.
This pattern is useful for managing shared resources, like a configuration manager or a database connection,
 ensuring only one instance is used throughout the application.


    In Spring Boot, beans are Singleton by default

    Even putting @Autowired
                 Repo repo;
                 Here repo is singleton

    Test in browser
    http://localhost:8080/count1
    http://localhost:8080/count2

    BookRepository objects have the same object ID:
    com.baeldung.spring.patterns.singleton.BookRepository@3ea9524f
    com.baeldung.spring.patterns.singleton.BookRepository@3ea9524f

    The BookRepository object IDs in the LibraryController and BookController are the same,
     proving that Spring injected the same bean into both controllers.



    We can create separate instances of the BookRepository bean by changing the bean scope
    from singleton to prototype using the @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) annotation.

    Doing so instructs Spring to create separate objects for each of the BookRepository beans it creates.
    Therefore, if we inspect the object ID of the BookRepository in each of our controllers again,
    we see that they are no longer the same.
